{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MAPBOX_TOKEN","process","REACT_APP_MapboxAccessToken","console","log","SOURCE_COLOR","TARGET_COLOR","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","pitch","bearing","brushingExtension","BrushingExtension","getTooltip","object","name","net","App","data","enableBrushing","brushRadius","strokeWidth","opacity","mapStyle","useMemo","length","arcs","targets","sources","pairs","forEach","county","i","properties","flows","targetCentroid","centroid","value","gain","loss","Object","keys","toId","Math","abs","pairKey","Number","sort","a","b","join","sourceCentroid","sign","push","position","target","radius","source","sizeScale","scaleLinear","domain","range","pt","sqrt","getLayerData","layers","ScatterplotLayer","id","brushingRadius","brushingEnabled","radiusScale","getFillColor","d","extensions","lineWidthMinPixels","stroked","filled","getLineColor","pickable","ArcLayer","getWidth","getSourcePosition","getTargetPosition","getSourceColor","getTargetColor","initialViewState","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","Boolean","window","location","hostname","match","container","document","getElementById","ReactDOM","render","fetch","then","response","json","features","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c70b5931.chunk.js","sourcesContent":["import React, {useMemo} from 'react';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {ScatterplotLayer, ArcLayer} from '@deck.gl/layers';\nimport {BrushingExtension} from '@deck.gl/extensions';\nimport {scaleLinear} from 'd3-scale';\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = process.env.REACT_APP_MapboxAccessToken; // eslint-disable-line\nconsole.log(MAPBOX_TOKEN)\n\nexport const inFlowColors = [[35, 181, 184]];\nexport const outFlowColors = [[166, 3, 3]];\n\n// migrate out\nconst SOURCE_COLOR = [166, 3, 3];\n// migrate in\nconst TARGET_COLOR = [35, 181, 184];\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -100,\n  latitude: 40.7,\n  zoom: 3,\n  maxZoom: 15,\n  pitch: 0,\n  bearing: 0\n};\n\nconst brushingExtension = new BrushingExtension();\n\n/* eslint-disable  max-nested-callbacks */\nfunction getLayerData(data) {\n  if (!data || !data.length) {\n    return {};\n  }\n  const arcs = [];\n  const targets = [];\n  const sources = [];\n  const pairs = {};\n\n  data.forEach((county, i) => {\n    const {flows, centroid: targetCentroid} = county.properties;\n    const value = {gain: 0, loss: 0};\n\n    Object.keys(flows).forEach(toId => {\n      value[flows[toId] > 0 ? 'gain' : 'loss'] += flows[toId];\n\n      // if number too small, ignore it\n      if (Math.abs(flows[toId]) < 50) {\n        return;\n      }\n      const pairKey = [i, Number(toId)].sort((a, b) => a - b).join('-');\n      const sourceCentroid = data[toId].properties.centroid;\n      const gain = Math.sign(flows[toId]);\n\n      // add point at arc source\n      sources.push({\n        position: sourceCentroid,\n        target: targetCentroid,\n        name: data[toId].properties.name,\n        radius: 3,\n        gain: -gain\n      });\n\n      // eliminate duplicates arcs\n      if (pairs[pairKey]) {\n        return;\n      }\n\n      pairs[pairKey] = true;\n\n      arcs.push({\n        target: gain > 0 ? targetCentroid : sourceCentroid,\n        source: gain > 0 ? sourceCentroid : targetCentroid,\n        value: flows[toId]\n      });\n    });\n\n    // add point at arc target\n    targets.push({\n      ...value,\n      position: [targetCentroid[0], targetCentroid[1], 10],\n      net: value.gain + value.loss,\n      name: county.properties.name\n    });\n  });\n\n  // sort targets by radius large -> small\n  targets.sort((a, b) => Math.abs(b.net) - Math.abs(a.net));\n  const sizeScale = scaleLinear()\n    .domain([0, Math.abs(targets[0].net)])\n    .range([36, 400]);\n\n  targets.forEach(pt => {\n    pt.radius = Math.sqrt(sizeScale(Math.abs(pt.net)));\n  });\n\n  return {arcs, targets, sources};\n}\n\nfunction getTooltip({object}) {\n  return (\n    object &&\n    `\\\n    ${object.name}\n    Net gain: ${object.net}`\n  );\n}\n\n/* eslint-disable react/no-deprecated */\nexport default function App({\n  data,\n  enableBrushing = true,\n  brushRadius = 100000,\n  strokeWidth = 2,\n  opacity = 0.7,\n  mapStyle = 'mapbox://styles/mapbox/light-v9'\n}) {\n  const {arcs, targets, sources} = useMemo(() => getLayerData(data), [data]);\n\n  const layers = arcs &&\n    targets && [\n      new ScatterplotLayer({\n        id: 'sources',\n        data: sources,\n        brushingRadius: brushRadius,\n        brushingEnabled: enableBrushing,\n        // only show source points when brushing\n        radiusScale: enableBrushing ? 3000 : 0,\n        getFillColor: d => (d.gain > 0 ? TARGET_COLOR : SOURCE_COLOR),\n        extensions: [brushingExtension]\n      }),\n      new ScatterplotLayer({\n        id: 'targets-ring',\n        data: targets,\n        brushingRadius: brushRadius,\n        lineWidthMinPixels: 2,\n        stroked: true,\n        filled: false,\n        brushingEnabled: enableBrushing,\n        // only show rings when brushing\n        radiusScale: enableBrushing ? 4000 : 0,\n        getLineColor: d => (d.net > 0 ? TARGET_COLOR : SOURCE_COLOR),\n        extensions: [brushingExtension]\n      }),\n      new ScatterplotLayer({\n        id: 'targets',\n        data: targets,\n        brushingRadius: brushRadius,\n        brushingEnabled: enableBrushing,\n        pickable: true,\n        radiusScale: 3000,\n        getFillColor: d => (d.net > 0 ? TARGET_COLOR : SOURCE_COLOR),\n        extensions: [brushingExtension]\n      }),\n      new ArcLayer({\n        id: 'arc',\n        data: arcs,\n        getWidth: strokeWidth,\n        opacity,\n        brushingRadius: brushRadius,\n        brushingEnabled: enableBrushing,\n        getSourcePosition: d => d.source,\n        getTargetPosition: d => d.target,\n        getSourceColor: SOURCE_COLOR,\n        getTargetColor: TARGET_COLOR,\n        extensions: [brushingExtension]\n      })\n    ];\n\n  return (\n    <DeckGL\n      layers={layers}\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true}\n      getTooltip={getTooltip}\n    >\n      <StaticMap\n        reuseMaps\n        mapStyle={mapStyle}\n        preventStyleDiffing={true}\n        mapboxApiAccessToken={MAPBOX_TOKEN}\n      />\n    </DeckGL>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Source data GeoJSON\nconst DATA_URL =\n  'https://raw.githubusercontent.com/visgl/deck.gl-data/master/examples/arc/counties.json'; // eslint-disable-line\n\nconst container = document.getElementById('root');\nReactDOM.render(<App />, container);\n\nfetch(DATA_URL)\n  .then(response => response.json())\n  .then(({features}) => {\n    ReactDOM.render(<App data={features} />, container);\n  });\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}