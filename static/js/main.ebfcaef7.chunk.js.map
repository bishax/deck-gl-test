{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SOURCE_COLOR","TARGET_COLOR","brushingExtension","BrushingExtension","getTooltip","object","html","name","net","style","fontSize","Arc","data","enableBrushing","brushRadius","strokeWidth","opacity","mapStyle","useState","longitude","latitude","zoom","maxZoom","pitch","bearing","initialViewState","setInitialViewState","onViewStateChange","useCallback","viewState","console","log","useMemo","arcs","targets","sources","radiusScale","scalePow","exponent","domain","range","layers","ScatterplotLayer","id","brushingRadius","brushingEnabled","getFillColor","d","gain","extensions","pickable","lineWidthMinPixels","stroked","filled","getLineColor","HeatmapLayer","getPosition","position","getWeight","radiusPixels","intensity","threshold","ArcLayer","getWidth","getSourcePosition","target","getTargetPosition","source","getSourceColor","getTargetColor","className","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","process","Home","Navigation","exact","activeClassName","to","Main","path","component","App","Boolean","window","location","hostname","match","container","document","getElementById","fetch","then","response","json","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ebfcaef7.chunk.js","sourcesContent":["import React, {useMemo, useState, useCallback} from 'react';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {ScatterplotLayer, ArcLayer} from '@deck.gl/layers';\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\nimport {BrushingExtension} from '@deck.gl/extensions';\nimport {scaleLinear, scaleSqrt, scalePow} from 'd3-scale';\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MapboxAccessToken; // eslint-disable-line\n\nexport const inFlowColors = [[35, 181, 184]];\nexport const outFlowColors = [[166, 3, 3]];\n\n// migrate out\nconst SOURCE_COLOR = [166, 3, 3];\n// migrate in\nconst TARGET_COLOR = [35, 181, 184];\n\n\nconst brushingExtension = new BrushingExtension();\n\n\nfunction getTooltip({object}) {\n  return (\n    object && {\n      html: `<h3>${object.name}</h3><p>Number of collaborations: ${object.net}</p>`,\n      style: {fontSize: '0.8em'}\n    }\n  );\n}\n\n// eslint-disable react/no-deprecated\nfunction Arc({\n  data,\n  enableBrushing = true,\n  brushRadius = 100,\n  strokeWidth = 2,\n  opacity = 0.7,\n  mapStyle = 'mapbox://styles/mapbox/light-v9'\n}) {\n  const [initialViewState, setInitialViewState] = useState({\n    longitude: -2.9,\n    latitude: 56.1,\n    zoom: 5.5,\n    maxZoom: 15,\n    pitch: 0,\n    bearing: 0\n  });\n\n  const onViewStateChange = useCallback(({viewState}) => {\n    console.log(\"zoom\")\n    console.log(viewState.zoom)\n    // Save the view state and trigger rerender\n    setInitialViewState(viewState);\n  }, []);\n\n  // Arcs (edge): [{target: Array(3), source: Array(3), value: Number}]\n  // Targets (node): [{gain: Number, loss: Number, position: Array(3), net: Number, name: String}]\n  // Sources (edge): [{position: Array(3), target: Array(3), name: String, radius: Number, gain: Number}]\n  const {arcs, targets, sources} = useMemo(() => data, [data])\n  console.log(arcs)\n  console.log(targets)\n\n  const radiusScale = (scalePow()\n                       .exponent(3)\n                       .domain([initialViewState.maxZoom, 5])\n                       .range([10, 550]))(initialViewState.zoom)\n  console.log(radiusScale)\n\n  const layers = arcs &&\n    targets && [\n      new ScatterplotLayer({\n        id: 'sources',\n        data: sources,\n        brushingRadius: brushRadius,\n        brushingEnabled: enableBrushing,\n        // only show source points when brushing\n        radiusScale: enableBrushing ? 3000 : 0,\n        getFillColor: d => (d.gain > 0 ? TARGET_COLOR : SOURCE_COLOR),\n        extensions: [brushingExtension]\n      }),\n      new ScatterplotLayer({\n        id: 'targets-base',\n        data: targets,\n        brushingRadius: brushRadius,\n        brushingEnabled: false,\n        pickable: true,\n        radiusScale: radiusScale,\n        getFillColor: TARGET_COLOR,\n      }),\n      new ScatterplotLayer({\n        id: 'targets-ring',\n        data: targets,\n        brushingRadius: brushRadius,\n        lineWidthMinPixels: 2,\n        stroked: true,\n        filled: false,\n        brushingEnabled: enableBrushing,\n        radiusScale: enableBrushing ? 1000 : 0, // only show rings when brushing\n        getLineColor: SOURCE_COLOR,\n        extensions: [brushingExtension]\n      }),\n      new ScatterplotLayer({\n        id: 'targets',\n        data: targets,\n        brushingRadius: brushRadius,\n        brushingEnabled: enableBrushing,\n        pickable: true,\n        radiusScale: 500,\n        getFillColor: SOURCE_COLOR,\n        extensions: [brushingExtension]\n      }),\n      new HeatmapLayer({\n        data: targets,\n        id: 'heatmap',\n        pickable: false,\n        getPosition: d => d.position,\n        getWeight: d => d.net,\n        radiusPixels: 100,\n        intensity: 1,\n        threshold: 0.02\n      }),\n      new ArcLayer({\n        id: 'arc-reverse',\n        data: arcs,\n        getWidth: strokeWidth,\n        opacity,\n        brushingRadius: brushRadius,\n        brushingEnabled: enableBrushing,\n        getSourcePosition: d => d.target,\n        getTargetPosition: d => d.source,\n        getSourceColor: SOURCE_COLOR,\n        getTargetColor: TARGET_COLOR,\n        extensions: [brushingExtension]\n      }),\n      new ArcLayer({\n        id: 'arc',\n        data: arcs,\n        getWidth: strokeWidth,\n        opacity,\n        brushingRadius: brushRadius,\n        brushingEnabled: enableBrushing,\n        getSourcePosition: d => d.source,\n        getTargetPosition: d => d.target,\n        getSourceColor: SOURCE_COLOR,\n        getTargetColor: TARGET_COLOR,\n        extensions: [brushingExtension]\n      })\n    ];\n\n\n  return (\n    <div className='arc'>\n      <DeckGL\n        layers={layers}\n        viewState={initialViewState}\n        onViewStateChange={onViewStateChange}\n        controller={true}\n        getTooltip={getTooltip}\n      >\n        <Navigation/>\n        <StaticMap\n          reuseMaps\n          mapStyle={mapStyle}\n          preventStyleDiffing={true}\n          mapboxApiAccessToken={MAPBOX_TOKEN}\n        />\n      </DeckGL>\n    </div>\n  );\n}\n\nconst App = ({data}) => (\n  <div className='app'>\n    {/* <h1>Gateway to Research Explorer</h1> */}\n    {/* <Navigation /> */}\n    <Main data={data}/>\n   </div>\n);\n\nconst Home = () => (\n  <div className='home'>\n    <Navigation/>\n    <p>Data may take a while to load</p>\n  </div>\n);\n\nconst Navigation = () => (\n  <nav>\n    <ul>\n      <li> <NavLink exact activeClassName=\"current\" to='/'>Home</NavLink></li>\n      <li> <NavLink exact activeClassName=\"current\" to='/arc'>Arc</NavLink></li>\n    </ul>\n  </nav>\n)\nconst Main = ({data}) => {\n  return (\n    <Switch>\n      <Route exact path='/' component={Home}></Route>\n      {/* <Route exact path='/arc' render={(props) => <Arc data={data} {...props.match.params} />}></Route> */}\n      <Route exact path='/arc'><Arc data={data}/></Route>\n    </Switch>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Source data GeoJSON\nconst DATA_URL =\n  'https://nesta-test.s3.eu-west-2.amazonaws.com/gtr-deck-gl-test.json'; // eslint-disable-line\n\nconst container = document.getElementById('root');\n// ReactDOM.render(\n//   <BrowserRouter><App/></BrowserRouter>,\n//   container\n// );\n\nfetch(DATA_URL)\n  .then(response => response.json())\n  .then(data => {\n    ReactDOM.render(\n      <BrowserRouter><App data={data}/></BrowserRouter>, container\n      );\n  });\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}